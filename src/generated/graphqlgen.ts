// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Post,
  PostSubscriptionPayload,
  PostPreviousValues
} from "./prisma-client/index";
import { Context } from "../types";

type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsFilterPosts {
    searchString: string | null;
  }

  export interface ArgsPost {
    id: string;
  }

  export type FeedResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type FilterPostsResolver = (
    parent: undefined,
    args: ArgsFilterPosts,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type PostResolver = (
    parent: undefined,
    args: ArgsPost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export interface Type {
    feed: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    filterPosts: (
      parent: undefined,
      args: ArgsFilterPosts,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    post: (
      parent: undefined,
      args: ArgsPost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    createdAt: (parent: Post) => parent.createdAt,
    updatedAt: (parent: Post) => parent.updatedAt,
    published: (parent: Post) => parent.published,
    title: (parent: Post) => parent.title,
    content: (parent: Post) =>
      parent.content === undefined ? null : parent.content
  };

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    published: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateDraft {
    title: string;
    content: string | null;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsPublish {
    id: string;
  }

  export type CreateDraftResolver = (
    parent: undefined,
    args: ArgsCreateDraft,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type DeletePostResolver = (
    parent: undefined,
    args: ArgsDeletePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type PublishResolver = (
    parent: undefined,
    args: ArgsPublish,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export interface Type {
    createDraft: (
      parent: undefined,
      args: ArgsCreateDraft,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    deletePost: (
      parent: undefined,
      args: ArgsDeletePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    publish: (
      parent: undefined,
      args: ArgsPublish,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type PostsResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<PostSubscriptionPayload | null>
      | Promise<AsyncIterator<PostSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | PostSubscriptionPayload
      | null
      | Promise<PostSubscriptionPayload | null>;
  };

  export interface Type {
    posts: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<PostSubscriptionPayload | null>
        | Promise<AsyncIterator<PostSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | PostSubscriptionPayload
        | null
        | Promise<PostSubscriptionPayload | null>;
    };
  }
}

export namespace PostSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: PostSubscriptionPayload) => parent.mutation,
    node: (parent: PostSubscriptionPayload) => parent.node,
    updatedFields: (parent: PostSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: PostSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver = (
    parent: PostSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>;

  export type NodeResolver = (
    parent: PostSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type UpdatedFieldsResolver = (
    parent: PostSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type PreviousValuesResolver = (
    parent: PostSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PostPreviousValues | null | Promise<PostPreviousValues | null>;

  export interface Type {
    mutation: (
      parent: PostSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>;

    node: (
      parent: PostSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    updatedFields: (
      parent: PostSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    previousValues: (
      parent: PostSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PostPreviousValues | null | Promise<PostPreviousValues | null>;
  }
}

export namespace PostPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: PostPreviousValues) => parent.id,
    createdAt: (parent: PostPreviousValues) => parent.createdAt,
    updatedAt: (parent: PostPreviousValues) => parent.updatedAt,
    published: (parent: PostPreviousValues) => parent.published,
    title: (parent: PostPreviousValues) => parent.title,
    content: (parent: PostPreviousValues) =>
      parent.content === undefined ? null : parent.content
  };

  export type IdResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: PostPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    published: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: PostPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  PostSubscriptionPayload: PostSubscriptionPayloadResolvers.Type;
  PostPreviousValues: PostPreviousValuesResolvers.Type;
}
